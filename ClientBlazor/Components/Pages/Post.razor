@page "/Post"
@attribute [Authorize]
@using System.Security.Claims
@using ClientBlazor.Services
@using DTOs
@inject IPostService httpPostService;
@inject ICommentService httpCommentService;
@inject IUserService httpUserService;

<h3>Post</h3>

<input @bind="postTitle" placeholder="Enter post title"/>
<input @bind="postBody" placeholder="Enter post body"/>

<button class="crudButton" @onclick="AddPost">Add Post</button>

<ul style="padding: 20px">
    @foreach (var post in posts)
    {
        <li @onclick="() => OpenPost(post)">
            <p>Title: @post.Title posted by @httpUserService.GetUsername(post.UserId).Result, @post.Body</p>
        </li>
    }
</ul>

@if (generatedPost != null)
{
    <div style="padding: 20px; background-color: #6C7397">
        <p>@generatedPost.Title by @httpUserService.GetUsername(generatedPost.UserId).Result</p>
        <p>@generatedPost.Body</p>
        <input class="inputField" @bind="comment" placeholder="New Comment"/>
        <button @onclick="AddNewComment">Add Comment</button>
        <p>Comments: </p>
        <ul>
            @foreach (var comment in comments)
            {
                <p>@httpUserService.GetUsername(comment.UserId).Result: @comment.Body</p>
            }
        </ul>
    </div>
}

<p>@response</p>

@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private int userId;
    private string postTitle;
    private string postBody;
    private string response;
    private string comment;
    private List<CreatePostDto> posts = new();
    private List<CreateCommentDto> comments = new();
    private CreatePostDto generatedPost;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await State;
        ClaimsPrincipal claimsPrincipal = authState.User;
        if (claimsPrincipal.Identity == null || !claimsPrincipal.Identity.IsAuthenticated)
            return;

        userId = int.Parse(claimsPrincipal.Claims.Single(c => c.Type == "Id").Value);
        posts = (await httpPostService.GetPostsAsync())?.ToList() ?? new();
        await httpUserService.LoadUsernamesForPosts(posts);
    }

    private async Task AddPost()
    {
        var dto = new CreatePostDto { Title = postTitle, Body = postBody, UserId = userId };
        await httpPostService.AddPostAsync(dto);
        
        posts = (await httpPostService.GetPostsAsync())?.ToList() ?? new();
        await httpUserService.LoadUsernamesForPosts(posts);
        
        response = $"Post '{postTitle}' added.";
        postTitle = postBody = string.Empty;
    }

    private async Task AddNewComment()
    {
        var dto = new CreateCommentDto { Body = comment, PostId = generatedPost.Id, UserId = userId };
        await httpCommentService.AddComment(dto);
        
        await LoadCommentsForPost(generatedPost);
        comment = string.Empty;
    }

    private async Task OpenPost(CreatePostDto post)
    {
        generatedPost = post;
        await LoadCommentsForPost(post);
    }

    private async Task LoadCommentsForPost(CreatePostDto post)
    {
        comments = await httpCommentService.GetComments(post.Id);
        await httpUserService.LoadUsernamesForComments(comments);
    }
}
